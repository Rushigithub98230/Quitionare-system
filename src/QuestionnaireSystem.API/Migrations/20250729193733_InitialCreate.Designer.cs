// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuestionnaireSystem.Infrastructure.Data;

#nullable disable

namespace QuestionnaireSystem.API.Migrations
{
    [DbContext(typeof(QuestionnaireDbContext))]
    [Migration("20250729193733_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.PatientQuestionnaireAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AssignedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NotificationSent")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReminderCount")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("QuestionnaireId");

                    b.HasIndex("Status");

                    b.ToTable("PatientQuestionnaireAssignments");
                });

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.PatientResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubmissionIp")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<int?>("TimeTaken")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("PatientResponses");
                });

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConditionalLogic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("HelpText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageAltText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SectionName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Settings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ValidationRules")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("QuestionnaireId", "DisplayOrder");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.QuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("HasTextInput")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OptionValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId", "DisplayOrder");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.QuestionOptionResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomText")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("QuestionResponseId");

                    b.ToTable("QuestionOptionResponses");
                });

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.QuestionResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("BooleanResponse")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateResponse")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatetimeResponse")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("FileSize")
                        .HasColumnType("int");

                    b.Property<string>("FileType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("JsonResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NumberResponse")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TextResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ResponseId");

                    b.ToTable("QuestionResponses");
                });

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.QuestionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("HasOptions")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportsFileUpload")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportsImage")
                        .HasColumnType("bit");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ValidationRules")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            DisplayName = "Text Input",
                            HasOptions = false,
                            IsActive = true,
                            SupportsFileUpload = false,
                            SupportsImage = true,
                            TypeName = "text"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            DisplayName = "Text Area",
                            HasOptions = false,
                            IsActive = true,
                            SupportsFileUpload = false,
                            SupportsImage = true,
                            TypeName = "textarea"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            DisplayName = "Radio Button",
                            HasOptions = true,
                            IsActive = true,
                            SupportsFileUpload = false,
                            SupportsImage = true,
                            TypeName = "radio"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            DisplayName = "Checkbox",
                            HasOptions = true,
                            IsActive = true,
                            SupportsFileUpload = false,
                            SupportsImage = true,
                            TypeName = "checkbox"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            DisplayName = "Dropdown",
                            HasOptions = true,
                            IsActive = true,
                            SupportsFileUpload = false,
                            SupportsImage = true,
                            TypeName = "select"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            DisplayName = "Multi-Select",
                            HasOptions = true,
                            IsActive = true,
                            SupportsFileUpload = false,
                            SupportsImage = true,
                            TypeName = "multiselect"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            DisplayName = "Number",
                            HasOptions = false,
                            IsActive = true,
                            SupportsFileUpload = false,
                            SupportsImage = true,
                            TypeName = "number"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            DisplayName = "Date",
                            HasOptions = false,
                            IsActive = true,
                            SupportsFileUpload = false,
                            SupportsImage = true,
                            TypeName = "date"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            DisplayName = "Email",
                            HasOptions = false,
                            IsActive = true,
                            SupportsFileUpload = false,
                            SupportsImage = true,
                            TypeName = "email"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            DisplayName = "Phone",
                            HasOptions = false,
                            IsActive = true,
                            SupportsFileUpload = false,
                            SupportsImage = true,
                            TypeName = "phone"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            DisplayName = "File Upload",
                            HasOptions = false,
                            IsActive = true,
                            SupportsFileUpload = true,
                            SupportsImage = true,
                            TypeName = "file"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            DisplayName = "Rating Scale",
                            HasOptions = false,
                            IsActive = true,
                            SupportsFileUpload = false,
                            SupportsImage = true,
                            TypeName = "rating"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            DisplayName = "Slider",
                            HasOptions = false,
                            IsActive = true,
                            SupportsFileUpload = false,
                            SupportsImage = true,
                            TypeName = "slider"
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            DisplayName = "Yes/No",
                            HasOptions = true,
                            IsActive = true,
                            SupportsFileUpload = false,
                            SupportsImage = true,
                            TypeName = "yes_no"
                        });
                });

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.QuestionnaireTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IsActive");

                    b.ToTable("QuestionnaireTemplates");
                });

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.PatientQuestionnaireAssignment", b =>
                {
                    b.HasOne("QuestionnaireSystem.Core.Models.QuestionnaireTemplate", "Questionnaire")
                        .WithMany("Assignments")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.PatientResponse", b =>
                {
                    b.HasOne("QuestionnaireSystem.Core.Models.PatientQuestionnaireAssignment", "Assignment")
                        .WithMany("PatientResponses")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestionnaireSystem.Core.Models.QuestionnaireTemplate", "Questionnaire")
                        .WithMany()
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.Question", b =>
                {
                    b.HasOne("QuestionnaireSystem.Core.Models.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuestionnaireSystem.Core.Models.QuestionnaireTemplate", "Questionnaire")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionType");

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.QuestionOption", b =>
                {
                    b.HasOne("QuestionnaireSystem.Core.Models.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.QuestionOptionResponse", b =>
                {
                    b.HasOne("QuestionnaireSystem.Core.Models.QuestionOption", "Option")
                        .WithMany("OptionResponses")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuestionnaireSystem.Core.Models.QuestionResponse", "QuestionResponse")
                        .WithMany("OptionResponses")
                        .HasForeignKey("QuestionResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("QuestionResponse");
                });

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.QuestionResponse", b =>
                {
                    b.HasOne("QuestionnaireSystem.Core.Models.Question", "Question")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuestionnaireSystem.Core.Models.PatientResponse", "Response")
                        .WithMany("QuestionResponses")
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.QuestionnaireTemplate", b =>
                {
                    b.HasOne("QuestionnaireSystem.Core.Models.Category", "Category")
                        .WithMany("Questionnaires")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.Category", b =>
                {
                    b.Navigation("Questionnaires");
                });

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.PatientQuestionnaireAssignment", b =>
                {
                    b.Navigation("PatientResponses");
                });

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.PatientResponse", b =>
                {
                    b.Navigation("QuestionResponses");
                });

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.Question", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.QuestionOption", b =>
                {
                    b.Navigation("OptionResponses");
                });

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.QuestionResponse", b =>
                {
                    b.Navigation("OptionResponses");
                });

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.QuestionType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuestionnaireSystem.Core.Models.QuestionnaireTemplate", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
